#!/usr/bin/perl
use strict;
use File::Basename;

my ($jobDir, $strainFilesDirA, $polymorphismThresholdA, $unknownThresholdA, $strainsListFileA, $strainFilesDirB, $polymorphismThresholdB, $unknownThresholdB, $strainsListFileB, $strainsAreNames, $outputScriptFile, $reconstructNameCmd, $idPrefix, $idSuffix, $outputDataFile) = @ARGV;

usage() unless scalar(@ARGV) == 14 || scalar(@ARGV) == 15;

#
# write a perl wrapper because perl has the ninja power to change process group id
#
open(O, ">$outputScriptFile") || die "Can't open output_file '$outputScriptFile' for writing\n";
my $cmdString = $outputScriptFile =~ /^\//? "$outputScriptFile.bash" : "$jobDir/$outputScriptFile.bash";
print O "#!/usr/bin/perl
# this wrapper sets the process group id so that all processes can be killed by traps, without killing parents such as tomcat
setpgrp(0,0);
\$cmd = \"$cmdString\";
system(\$cmd) && die \"perl could not run \$cmd \$?\";
";
close(O);

#
# write main script
#

# if strains are names, make a mapping from strain names to strain numbers
# this file is identical in strainFilesDir for A and B, so just use A
my %strainNameToNum;
if ($strainsAreNames) {
  open(SN, "$strainFilesDirA/strainIdToName.dat") || die "Can't open strain id mapping file '$strainFilesDirA/strainIdToName.dat'\n";
  while(<SN>) {
    chomp;
    my ($num, $name) = split(/\t/);
    $strainNameToNum{$name} = $num;
  }
  close(SN);
}

# open target script file and write initial stuff to it
open(O, ">$outputScriptFile.bash") || die "Can't open output_file '$outputScriptFile.bash' for writing\n";
print O "set -e\n";
print O "set -x\n";
print O "cd $jobDir\n";

# read strains list file A and make a queue of strains in set A to process from it
open(S, $strainsListFileA) || die "Can't open strains_list_file_a '$strainsListFileA'\n";
my @mergeQueueOriginalA = <S>;
close(S);
my @mergeQueueA = map { chomp; "$strainFilesDirA/" . getStrainNum($_)} @mergeQueueOriginalA;
my $strainsCountA = scalar(@mergeQueueA);


# read strains list file B and make a queue of strains in set B to process from it
open(S, $strainsListFileB) || die "Can't open strains_list_file_b '$strainsListFileB'\n";
my @mergeQueueOriginalB = <S>;
close(S);
my @mergeQueueB = map { chomp; "$strainFilesDirB/" . getStrainNum($_)} @mergeQueueOriginalB;
my $strainsCountB = scalar(@mergeQueueB);


# write making of fifos and a trap to remove them
my $fifoCount = $strainsCountA + $strainsCountB + 2;   # add two to hold consensuses for A and B
my $fifoCursor = 0;
my $fifoPrefix = "fifo";
print O "mkfifo ";
for (my $i = 1; $i <= $fifoCount; $i++) {
  print O "$fifoPrefix$i ";
}
print O "\n";
print O "trap \"rm ";
for (my $i = 1; $i <= $fifoCount; $i++) {
  print O "$fifoPrefix$i ";
}
print O "\" EXIT TERM\n";

my $consensusFifoA = $fifoPrefix . ($fifoCount-1);
my $consensusFifoB = $fifoPrefix . $fifoCount;

printMakeConsensus(\@mergeQueueA, $consensusFifoA, $strainsCountA, $polymorphismThresholdA, $unknownThresholdA);  # use second to last fifo
printMakeConsensus(\@mergeQueueB, $consensusFifoB, $strainsCountB, $polymorphismThresholdB, $unknownThresholdB); # use last fifo

my $output = $outputDataFile? ">$outputDataFile" : "";
print O "hsssFindMajorAlleles $consensusFifoA $consensusFifoB | $reconstructNameCmd $strainFilesDirA/contigIdToSourceId.dat 2 $output $idPrefix $idSuffix\n";

# print final stuff and clean up
print O "exit\n";
close(O);
system("chmod +x $outputScriptFile");
system("chmod +x $outputScriptFile.bash");

# get strain num from strain name (unity mapping if there were no names on input)
sub getStrainNum {
  my ($strain) = @_;

  my $strainNum = $strain;

  if ($strainsAreNames) {
    $strainNum = $strainNameToNum{$strain};
    die "Can't find strain number for strain name '$strain'" unless $strainNum;
  }
  return $strainNum;
}

sub printMakeConsensus {
  my ($mergeQueue, $outputFifo, $strainsCount, $polymorphismThreshold, $unknownThreshold) = @_;

  die "Error: '$strainFilesDirA/referenceGenome.dat' does not exist or is empty " unless -s "$strainFilesDirA/referenceGenome.dat";

  # print out merge commands and then the find polymorphic command
  my $output = $outputDataFile? ">$outputDataFile" : "";
  while (1) {
    # if the merge queue has more than one stream in it, merge two at a time
    if (scalar(@$mergeQueue) > 1) {
      my $input1 = shift(@$mergeQueue);
      my $input2 = shift(@$mergeQueue);
      $fifoCursor++;
      push(@$mergeQueue, "$fifoPrefix$fifoCursor");
      my $strain1 = basename($input1);
      my $strain2 = basename($input2);
      $strain1 = 0 if $strain1 =~ /$fifoPrefix/;
      $strain2 = 0 if $strain2 =~ /$fifoPrefix/;
      print O "hsssMergeStrainsWrapper $fifoPrefix$fifoCursor $input1 $strain1 $input2 $strain2  &\n";
    }
    # if only one stream in the queue, it is the result of all the merging.  print find polymorphism command
    else {
      my $allMerged = shift(@$mergeQueue);

      # if there was only one file input, then the merged stream needs a strain id column
      if ($strainsCount == 1) {
	my $singleInputFile = $allMerged;
	my $strainId = basename($singleInputFile);
	$fifoCursor++;
	print O "hsssAddStrainId $strainId < $singleInputFile > $fifoPrefix$fifoCursor &\n";
	$allMerged = "$fifoPrefix$fifoCursor";
      }

      print O "hsssMergedToConsensus $allMerged $strainFilesDirA/referenceGenome.dat $strainsCount $polymorphismThreshold $unknownThreshold > $outputFifo &\n";
      last;
    }
  }
}

sub usage {

die "
Generate a bash script that will run a high-speed SNP search to find polymorphism among a set of input strain files.

usage: hsssGenerateMajorAllelesScript job_dir set_a_strain_files_dir set_a_polymorphism_threshold set_a_unknown_threshold set_a_strains_list_file set_b_strain_files_dir set_b_polymorphism_threshold set_b_unknown_threshold set_b_strains_list_file strains_are_names output_script_file [output_data_file]

where:
  - job_dir:  a temp directory in which to create a set of unix fifos for this run, and in which to run the job.
  - set_a_strains_file_dir:  the directory in which to find strain files for set A (ie, at a certain read freq).
  - set_a_polymorphism_threshold: see the hsssFindMajorAlleles program for documentation on this argument
  - set_a_unknown_threshold: see the hsssFindMajorAlleles program for documentation on this argument
  - set_a_strains_list_file: a list of strain files.  Each must have an integer as a name (an ID for that strain).
  - set_b_strains_file_dir:  the directory in which to find strain files for set B (ie, at a certain read freq).
  - set_b_polymorphism_threshold: similar to set_a_polymorphism_threshold, but for set B
  - set_b_unknown_threshold: similar to set_a_unknown_threshold, but for set B
  - set_b_strains_list_file: similar to set_a_strains_list_file, but for set B
  - strains_are_names: 0/1.  1=the strains in strains_list_files are strain names, not numbers as found in strains_file_dir.
  - output_script_file: the script
  - output_data_file: optional file for the output script to write its output to.  if absent, script will write to stdout.

";
}

