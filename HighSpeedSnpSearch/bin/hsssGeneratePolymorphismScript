#!/usr/bin/perl
use strict;
use File::Basename;

my ($strainFilesDir, $tmpDir, $polymorphismThreshold, $unknownThreshold, $strainsListFile, $strainsAreNames, $outputScriptFile, $outputDataFile) = @ARGV;

usage() unless scalar(@ARGV) == 7 || scalar(@ARGV) == 8;

#
# write a perl wrapper because perl has the ninja power to change process group id
#
open(O, ">$outputScriptFile") || die "Can't open output_file '$outputScriptFile' for writing\n";
print O "#!/usr/bin/perl
# this wrapper sets the process group id so that all processes can be killed by traps, without killing parents such as tomcat
setpgrp(0,0);
\$cmd = \"$outputScriptFile.bash\";
system(\$cmd) && die \"perl could not run \$cmd \$?\";
";
close(O);

#
# write main script
#

# if strains are names, make a mapping from strain names to strain numbers
my %strainNameToNum;
if ($strainsAreNames) {
  open(SN, "$strainFilesDir/strainIdToName.dat") || die "Can't open strain id mapping file '$strainFilesDir/strainIdToName.dat'\n";
  while(<SN>) {
    chomp;
    my ($num, $name) = split(/\t/);
    $strainNameToNum{$name} = $num;
  }
  close(SN);
}

# open target script file and write initial stuff to it
open(O, ">$outputScriptFile.bash") || die "Can't open output_file '$outputScriptFile.bash' for writing\n";
print O "set -e\n";
print O "set -x\n";
print O "cd $tmpDir\n";


# read strains list file and make a queue of strains to process from it
open(S, $strainsListFile) || die "Can't open strains_list_file '$strainsListFile'\n";
my @mergeQueueOriginal = <S>;
close(S);
my @mergeQueue = map { chomp; "$strainFilesDir/" . getStrainNum($_)} @mergeQueueOriginal;
my $strainsCount = scalar(@mergeQueue);


# write making of fifos and a trap to remove them
my $fifoCount = $strainsCount;
my $fifoCursor = 0;
my $fifoPrefix = "fifo";
print O "mkfifo ";
for (my $i = 1; $i <= scalar(@mergeQueue); $i++) {
  print O "$fifoPrefix$i ";
}
print O "\n";
print O "trap \"rm ";
for (my $i = 1; $i <= $fifoCount; $i++) {
  print O "$fifoPrefix$i ";
}
print O "\" EXIT TERM\n";

# print out merge commands and then the find polymorphic command
my $output = $outputDataFile? ">$outputDataFile" : "";
while(1) {
  # if the merge queue has more than one stream in it, merge two at a time
  if (scalar(@mergeQueue) > 1) {
    my $input1 = shift(@mergeQueue);
    my $input2 = shift(@mergeQueue);
    $fifoCursor++;
    push(@mergeQueue, "$fifoPrefix$fifoCursor");
    my $strain1 = basename($input1);
    my $strain2 = basename($input2);
    $strain1 = 0 if $strain1 =~ /$fifoPrefix/;
    $strain2 = 0 if $strain2 =~ /$fifoPrefix/;
    print O "hsssMergeStrainsWrapper $fifoPrefix$fifoCursor $input1 $strain1 $input2 $strain2  &\n";
  }
  # if only one stream in the queue, it is the result of all the merging.  print find polymorphism command
  else {
    my $allMerged = shift(@mergeQueue);
    print O "hsssFindPolymorphic $allMerged $strainFilesDir/referenceGenome.dat $strainsCount $polymorphismThreshold $unknownThreshold | hsssReconstructSnpId $strainFilesDir/contigIdToSourceId.dat $output\n";
    last;
  }
}

# print final stuff and clean up
print O "exit\n";
close(O);
system("chmod +x $outputScriptFile");
system("chmod +x $outputScriptFile.bash");


# get strain num from strain name (unity mapping if there were no names on input)
sub getStrainNum {
  my ($strain) = @_;

  my $strainNum = $strain;

  if ($strainsAreNames) {
    $strainNum = $strainNameToNum{$strain};
    die "Can't find strain number for strain name '$strain'" unless $strainNum;
  }
  return $strainNum;
}

sub usage {

die "
Generate a bash script that will run a high-speed SNP search to find polymorphism among a set of input strain files.

usage: hsssGeneratePolymorphismScript strain_files_dir tmp_dir polymorphism_threshold unknown_threshold strains_list_file strains_are_names output_script_file [output_data_file]

where:
  - strains_file_dir:  the directory in which to find strain files.
  - tmp_dir:  a temp directory in which to create a set of unix fifos for this run.
  - polymorphism_threshold: see the hsssFindPolymorphism program for documentation on this argument
  - unknown_threshold: see the hsssFindPolymorphism program for documentation on this argument
  - strains_list_file: a list of strain files.  Each must have an integer as a name (an ID for that strain).
  - strains_are_names: 0/1.  1=the strains in strains_list_file are strain names, not numbers as found in strains_file_dir.
  - output_script_file: the script
  - output_data_file: optional file for the output script to write its output to.  if absent, script will write to stdout.

";
}
