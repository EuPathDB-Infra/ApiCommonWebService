#!/usr/bin/perl
use strict;
use File::Basename;

my ($strainFilesDir, $tmpDir, $polymorphismThreshold, $unknownThreshold, $strainsListFile, $strainsAreNames, $outputScriptFile, $outputDataFile) = @ARGV;

usage() unless scalar(@ARGV) == 7 || scalar(@ARGV) == 8;

=head
if ($strainsDir =~ /(.+)\/$/) { $strainsDir = $1 }   # strip trailing /

# get list of files into array

my @mergeQueueOriginal;

opendir(my $dh, $strainsDir) || die "can't opendir $strainsDir: $!";
my $strainsCount = 0;
foreach my $strainFile (readdir($dh)) {
  if ($strainFile ~= /^\d+$/) {
    push(@mergeQueueOriginal, $strainFile);
    $strainsCount++;
  }
}
closedir $dh;

my @mergeQueue = sort {-s "$strainsDir/$b" <=> -s "$strainsDir/$a"} @mergeQueueOriginal;

=cut

my %strainNameToNum;
if ($strainsAreNames) {
  open(SN, "$strainFilesDir/strainIdToName.dat") || die "Can't open strain id mapping file '$strainFilesDir/strainIdToName.dat'\n";
  while(<SN>) {
    chomp;
    my ($num, $name) = split(/\t/);
    $strainNameToNum{$name} = $num;
  }
  close(SN);
}

open(S, $strainsListFile) || die "Can't open strains_list_file '$strainsListFile'\n";
my @mergeQueueOriginal = <S>;
close(S);
my @mergeQueue = map { chomp; "$strainFilesDir/" . getStrainNum($_)} @mergeQueueOriginal;

my $strainsCount = scalar(@mergeQueue);
my $fifoCount = $strainsCount;

my $fifoCursor = 0;
my $fifoPrefix = "fifo";

open(O, ">$outputScriptFile") || die "Can't open output_file '$outputScriptFile' for writing\n";
print O "set -e\n";
print O "set -x\n";
print O "cd $tmpDir\n";
print O "mkfifo ";
for (my $i = 1; $i <= scalar(@mergeQueue); $i++) {
  print O "$fifoPrefix$i ";
}
print O "\n";

my $output = $outputDataFile? ">$outputDataFile" : "";

while(1) {
  if (scalar(@mergeQueue) == 1) {
    my $allMerged = shift(@mergeQueue);
    print O "hsssFindPolymorphic $allMerged $strainFilesDir/referenceGenome.dat $strainsCount $polymorphismThreshold $unknownThreshold | hsssReconstructSnpId $strainFilesDir/contigIdToSourceId.dat $output\n";
    last;
  } else {
    my $input1 = shift(@mergeQueue);
    my $input2 = shift(@mergeQueue);
    $fifoCursor++;
    push(@mergeQueue, "$fifoPrefix$fifoCursor");
    my $strain1 = basename($input1);
    my $strain2 = basename($input2);
    $strain1 = 0 if $strain1 =~ /$fifoPrefix/;
    $strain2 = 0 if $strain2 =~ /$fifoPrefix/;
    print O "hsssMergeStrains $input1 $strain1 $input2 $strain2 > $fifoPrefix$fifoCursor &\n";
  }
}
print O "rm ";
for (my $i = 1; $i <= $fifoCount; $i++) {
  print O "$fifoPrefix$i ";
}
print O "\n";
print O "exit\n";
close(O);
system("chmod +x $outputScriptFile");

sub getStrainNum {
  my ($strain) = @_;

  my $strainNum = $strain;

  if ($strainsAreNames) {
    $strainNum = $strainNameToNum{$strain};
    die "Can't find strain number for strain name '$strain'" unless $strainNum;
  }
  return $strainNum;
}

sub usage {

die "
Generate a bash script that will run a high-speed SNP search to find polymorphism among a set of input strain files.

usage: hsssGeneratePolymorphismScript strain_files_dir tmp_dir polymorphism_threshold unknown_threshold strains_list_file translate_strains output_script_file [output_data_file]

where:
  - strains_file_dir:  the directory in which to find strain files.
  - tmp_dir:  a temp directory in which to create a set of unix fifos for this run.
  - polymorphism_threshold: see the hsssFindPolymorphism program for documentation on this argument
  - unknown_threshold: see the hsssFindPolymorphism program for documentation on this argument
  - strains_list_file: a list of strain files.  Each must have an integer as a name (an ID for that strain).
  - strains_are_names: 0/1.  1=the strains in strains_list_file are strain names, not numbers as found in strains_file_dir.
  - output_script_file: the script
  - output_data_file: optional file for the output script to write its output to.  if absent, script will write to stdout.

";
}
